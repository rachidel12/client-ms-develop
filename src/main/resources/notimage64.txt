<!DOCTYPE html>
<html lang="en" style="overflow-y: scroll;">
<head>
  <meta charset="UTF-8">
  <title>Newman Summary Report</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/default.min.css">
  <link rel="stylesheet" href="https://cdn.datatables.net/v/bs4/dt-1.10.18/datatables.min.css"/>

<style>
code.renderMarkdown table, code.renderMarkdown th, code.renderMarkdown td {
    border: 1px solid black;
    width: max-content;
    padding: .75rem;
}

.theme-dark {
    --background-color: #222;
    --bg-card-deck: #444444;
    --text-color: #ccd2d8;
    --tab-border: solid 1px #444;
    --success: #3c9372;
    --failure: #c24a3f;
    --warning: #d28c23;
    --info: #4083b6;
    --badge-outline: #3c9372;
    --badge-bg: #cdd3db;
    --badge-text: #ccd2d9;
    --failure-row: #c24a3f;
    --warning-row: #d28c23;
    --card-bg: #444;
    --card-footer: #4f5758;
    --form-input: #ececb5;
    --hov-text: #d2dae5;
    --h4-text: #ccd1d9;
}

.theme-light {
    --tab-border: solid 1px #fff;
    --text-color: #000000;
    --success: #42a745;
    --failure: #dc3544;
    --warning: #f4c10b;
    --info: #49a1b8;
    --badge-outline: #040411;
    --badge-bg: #f8f9fa;
    --badge-text: #fff;
    --failure-row: #f5c6cb;
    --warning-row: #ffeeba;
    --card-bg: #f7f7f7;
    --hov-text: #fff;
    --h4-text: #ffffff;
}

body {
  padding-top:30px;
  background-color: var(--background-color)!important;
  color: var(--text-color);
}

#execution-data {
  padding: 10px;
  border: var(--tab-border);
  border-top: none;
}

.nav-tabs {
  padding-top: 10px;
  height: 105px;
  overflow-y: auto;
}

body.theme-dark .card-header {
    background-color: #444;
}

body.theme-light .card-header {
    background-color: #f7f7f7;
}

.card-footer {
    padding: .75rem 1.25rem;
    background-color: var(--card-footer);
}

.card-deck {
    background-color: var(--bg-card-deck)!important;
}
.form-control {
    background: var(--form-input);
}

.custom-tab {
  padding: 10px 15px;
  margin-right: 0px;
  height: 47px;
  width: 69px;
  text-align: center;
  border: var(--tab-border);
  border-bottom: none;
  cursor:pointer;
}

body.theme-dark .text-white {
    color: #ccd2d9!important;
}
h4 {
    color: var(--h4-text);
}

body.theme-dark h1 {
    color: #ccd2da;
}

body.theme-dark .bg-light>td {
    background: #4f5858!important;
}

body.theme-dark .hljs {
    background: #0a0a0ab0!important;
    color: #8d8787!important;
}

.bg-info {
    background-color: var(--info)!important;
}
.bg-success {
    background-color: var(--success)!important;
}

.alert-success {
    background-color: var(--success)!important;
}

.alert-warning {
    background-color: var(--warning)!important;
}

.alert-info {
    background-color: var(--info)!important;
}

.bg-warning {
    background-color: var(--warning)!important;
}

.badge-warning {
    color: var(--badge-text)!important;
    background-color: var(--warning)!important;
}

.table-warning>td {
    background-color: var(--warning-row);
}

.alert-danger {
    background-color: var(--failure)!important;
}

body.theme-dark .alert-dark {
    background-color: #636467!important;
}

body.theme-dark .text-dark {
    color: #d1dae4!important;
}

body.theme-dark .badge-light {
    color: #212529;
    background-color: #cdd3db;
}

body.theme-light .badge-light {
    color: #212529;
    background-color: #f8f9fa;
}
body.theme-light .bg-danger {
    background-color: var(--failure)!important;
}

body.theme-dark .bg-danger {
    background-color: var(--failure)!important;
}

.table-danger>td {
    background-color: var(--failure-row);
}

body.theme-dark .table .thead-light th {
    background-color: #4f5858!important;
    border-color: #dee2e6!important;
    color: #ccd2d8!important;
}

.itPassed {
  background: var(--success);
  color: white;
}
.itFailed {
  background: var(--failure);
  color: white;
}

.resultsInfoPass {
  color: var(--success);
  padding-top: 4px;
}

.resultsInfoFail {
  color: var(--failure);
  padding-top: 4px;
}

.badge-outline-success {
  color: var(--success);
  border: 1px solid var(--success);
  background-color: transparent;
}

.badge-outline {
  color: var(--badge-outline);
  border: 1px solid var(--badge-outline);
  background-color: transparent;
}

.btn-outline-success {
    color: var(--success)!important;
    border-color: var(--success)!important;
}

.backToTop:hover {
  background-color: var(--success);
  border-color: var(--success);
  color: var(--hov-text)!important;
}

.btn-outline-success:hover {
  background-color: var(--success);
  border-color: var(--success);
  color: var(--hov-text)!important;
}

.btn-outline-secondary {
  background-color: var(--success)!important;
  color: var(--hov-text)!important;
}

body.theme-dark .env-heading {
    color: #ccd2d9!important;
}

body, html {
  height:100%;
}

.card {
  overflow:hidden;
}

body.theme-dark .card-body {
    background-color: #444;
}

body.theme-light .card-body {
    background-color: #f7f7f7;
}

body.theme-dark .card-body .bg-danger {
    background-color: var(--failure)!important;
}

body.theme-light .card-body .bg-danger {
    background-color: var(--failure)!important;
}

.card-body .rotate {
  z-index: 8;
  float: right;
  height: 100%;
}

.card-body .rotate i {
  color: #14141426;
  position: absolute;
  left: 0;
  left: auto;
  right: -10px;
  bottom: 0;
  display: block;
  -webkit-transform: rotate(-44deg);
  -moz-transform: rotate(-44deg);
  -o-transform: rotate(-44deg);
  -ms-transform: rotate(-44deg);
  transform: rotate(-44deg);
}

.dyn-height {
  max-height:350px;
  overflow-y:auto;
}

.nav-pills .nav-link.active {
  background-color: transparent!important;
}

.backToTop {
  display: none;
  position: fixed;
  bottom: 10px;
  right: 20px;
  z-index: 99;
  font-size: 15px;
  outline: none;
  cursor: pointer;
  padding: 15px;
  border-radius: 4px;
}

.card-header .fa {
  transition: .3s transform ease-in-out;
}
.card-header .collapsed .fa {
  transform: rotate(90deg);
}

.single-line-tabs {
  padding-top: 10px;
  height: 60px;
}

::-webkit-scrollbar {
  width: 5px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
  background: #888;
}

::-webkit-scrollbar-thumb:hover {
  background: #555;
}

/* The switch - the box around the slider */
.switch {
  position: relative;
  display: inline-block;
  width: 44px;
  height: 20px;
}

/* Hide default HTML checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 20px;
  width: 20px;
  left: 0px;
  bottom: 4px;
  top: 0;
  bottom: 0;
  margin: auto 0;
  -webkit-transition: 0.4s;
  transition: 0.4s;
  box-shadow: 0 0px 15px #2020203d;
  background: white;
  background-repeat: no-repeat;
  background-position: center;
}

input:checked + .slider {
  background-color: #4083b6;
}

input:focus + .slider {
  box-shadow: 0 0 1px #4083b6;
}

input:checked + .slider:before {
  -webkit-transform: translateX(24px);
  -ms-transform: translateX(24px);
  transform: translateX(24px);
  background: white;
  background-repeat: no-repeat;
  background-position: center;
}

/* Rounded sliders */
.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}

table.dataTable td, table.dataTable tr {
    vertical-align: middle;
}

body.theme-dark code {
    color: #ccd2d8!important;
}

body.theme-light code {
    color: #000000!important;
}

.text-wrap {
    word-wrap: break-word; 
    min-width: 600px; 
    max-width: 600px; 
    white-space: normal;
}

</style>
</head>
<body class="theme-dark">
<script>
    function setTheme(themeName) {
        localStorage.setItem('theme', themeName);
        document.body.className = themeName;
    }

    function toggleTheme() {
        if (localStorage.getItem('theme') === 'theme-light') {
            setTheme('theme-dark');
        } else {
            setTheme('theme-light');
        }
    }
</script>
  <div class="container">
        <div class="container">
            <label>Light</label>
            <label id="switch" class="switch">
                <input type="checkbox" onchange="toggleTheme()" id="slider">
                <span class="slider round"></span>
            </label>
            <label>Dark</label>
        </div>
        <div class="card">
        <div class="card-header">
            <ul class="nav nav-pills mb-3 nav-justified" id="pills-tab" role="tablist">
            <li class="nav-item bg-info active" data-toggle="tooltip" title="Click to view the Summary">
                <a class="nav-link text-white" id="pills-summary-tab" data-toggle="pill" href="#pills-summary" role="tab" aria-controls="pills-summary" aria-selected="true">Summary</a>
            </li>
            <li class="nav-item bg-success" data-toggle="tooltip" title="Click to view the Requests">
                <a class="nav-link text-white" id="pills-requests-tab" data-toggle="pill" href="#pills-requests" role="tab" aria-controls="pills-requests" aria-selected="false">Total Requests <span class="badge badge-light">49</span></a>
            </li>
            <li class="nav-item bg-danger" data-toggle="tooltip" title="Click to view the Failed Tests">
                <a class="nav-link text-white" id="pills-failed-tab" data-toggle="pill" href="#pills-failed" role="tab" aria-controls="pills-failed" aria-selected="false">Failed Tests <span class="badge badge-light">11</span></a>
            </li>
            <li class="nav-item bg-warning" data-toggle="tooltip" title="Click to view the Skipped Tests">
                <a class="nav-link text-white" id="pills-skipped-tab" data-toggle="pill" href="#pills-skipped" role="tab" aria-controls="pills-skipped" aria-selected="false">Skipped Tests <span class="badge badge-light">0</span></a>
            </li>
            </ul>
        <div class="tab-content" id="pills-tabContent">
            <div class="tab-pane fade show active" id="pills-summary" role="tabcard" aria-labelledby="pills-summary-tab">
<div class="row">
  <div class="col-md-9 col-lg-12 main">
   <h1 class="display-2 text-center">Newman Run Dashboard</h1>
   <h5 class="text-center">Tuesday, 14 May 2024 16:46:06</h5>
   <div class="row">
    <div class="col-lg-3 col-md-6">
     <div class="card text-white card-success">
      <div class="card-body bg-danger">
       <div class="rotate">
        <i class="fa fa-retweet fa-5x"></i>
       </div>
       <h6 class="text-uppercase">Total Iterations</h6>
       <h1 class="display-1">1</h1>
      </div>
     </div>
    </div>
    <div class="col-lg-3 col-md-6">
     <div class="card text-white card-danger">
      <div class="card-body bg-success">
       <div class="rotate">
        <i class="fa fa-list fa-4x"></i>
       </div>
       <h6 class="text-uppercase">Total Assertions</h6>
       <h1 class="display-1">71</h1>
      </div>
     </div>
    </div>
    <div class="col-lg-3 col-md-6">
     <div class="card text-white card-info">
      <div class="card-body bg-danger">
       <div class="rotate">
        <i class="fa fa-plus-circle fa-5x"></i>
       </div>
       <h6 class="text-uppercase">Total Failed Tests</h6>
       <h1 class="display-1">11</h1>
      </div>
     </div>
    </div>
    <div class="col-lg-3 col-md-6">
     <div class="card text-white card-warning">
      <div class="card-body bg-success">
       <div class="rotate">
        <i class="fa fa-share fa-5x"></i>
       </div>
       <h6 class="text-uppercase">Total Skipped Tests</h6>
       <h1 class="display-1">0</h1>
      </div>
     </div>
    </div>
   </div>
   <hr>
    <div class="row">
    <div class="col">
        <div class="row">
        <div class="col-sm-12 mb-3">
            <div class="card border-info">
                <div class="card-body">
                <h5 class="card-title text-uppercase text-white text-center bg-info">File Information</h5>
                <span><i class="fas fa-file-code"></i></span><strong> Collection:</strong> AutoTest-ms-client<br>
                <span><i class="fas fa-folder"></i></span><strong> Specified Folders:</strong> activate<br>
                <span><i class="fas fa-file-code"></i></span><strong> Environment:</strong> DNA_Environment<br>
                </div>
            </div>
        </div>
        </div>
        <div class="row">
        <div class="col-sm-12 mb-3">
            <div class="card border-info">
                <div class="card-body">
                <h5 class="card-title text-uppercase text-white text-center bg-info">Timings and Data</h5>
                <span><i class="fas fa-stopwatch"></i></span><strong> Total run duration:</strong> 2m 46.8s<br>
                <span><i class="fas fa-database"></i></span><strong> Total data received:</strong> 20.19KB<br>
                <span><i class="fas fa-stopwatch"></i></span><strong> Average response time:</strong> 339ms<br>
                </div>
            </div>
        </div>
        </div>
        <div class="row">
        <div class="col-sm-12 mb-3">
            <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead class="thead-inverse">
                    <tr class="text-center">
                        <th class="text-uppercase">Summary Item</th>
                        <th class="text-uppercase">Total</th>
                        <th class="text-uppercase">Failed</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Requests</td>
                        <td class="text-center">49</td>
                        <td class="text-center">1</td>
                    </tr>
                    <tr>
                        <td>Prerequest Scripts</td>
                        <td class="text-center">33</td>
                        <td class="text-center">0</td>
                    </tr>
                    <tr>
                        <td>Test Scripts</td>
                        <td class="text-center">33</td>
                        <td class="text-center">1</td>
                    </tr>
                    <tr class="table-danger">
                        <td>Assertions</td>
                        <td class="text-center">71</td>
                        <td class="text-center">9</td>
                    </tr>
                    <tr class="">
                        <td>Skipped Tests</td>
                        <td class="text-center">0</td>
                        <td class="text-center">-</td>
                    </tr>
                </tbody>
            </table>
            </div>
        </div>
        </div>
    <hr>
   </div>
   </div>
  </div>
 </div>
        </div>
            <div class="tab-pane fade" id="pills-failed" role="tabcard" aria-labelledby="pills-failed-tab">
                <button id="topOfFailuresScreen" class="btn btn-outline-success btn-sm backToTop" onclick="topFunction()">Go To Top</button>

                    <div class="btn-group float-right" role="group" aria-label="Button Group">
                        <button id="openAllFailed" class="btn btn-outline-success btn-sm float-right" style="text-align: center; width: 185px;">Expand All Failed Tests</button>
                    </div>
                    <br>
                    <br>

                    <div class="alert alert-danger text-uppercase text-center">
                        <h4>Showing 11 Failures</h4>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-f4bb7b9e-2752-4dd4-b94c-2cbdf096bcc6" aria-expanded="false" aria-controls="collapse" id="fails-f4bb7b9e-2752-4dd4-b94c-2cbdf096bcc6" class="collapsed text-white z-block">
                                    Iteration 1 - AssertionError - activate - activatePositiveTest1 <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-f4bb7b9e-2752-4dd4-b94c-2cbdf096bcc6" class="collapse" aria-labelledby="fails-f4bb7b9e-2752-4dd4-b94c-2cbdf096bcc6">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> Response time is less than 200ms</h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >expected 547 to be below 200</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-66202744-248e-4486-8377-1a574da0e9bd" aria-expanded="false" aria-controls="collapse" id="fails-66202744-248e-4486-8377-1a574da0e9bd" class="collapsed text-white z-block">
                                    Iteration 1 - AssertionError - activate - activateNegativeValidTest2 <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-66202744-248e-4486-8377-1a574da0e9bd" class="collapse" aria-labelledby="fails-66202744-248e-4486-8377-1a574da0e9bd">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> Response time is less than 200ms</h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >expected 205 to be below 200</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-8e06924a-a152-4e9a-b058-f2c91c6bc5c3" aria-expanded="false" aria-controls="collapse" id="fails-8e06924a-a152-4e9a-b058-f2c91c6bc5c3" class="collapsed text-white z-block">
                                    Iteration 1 - AssertionError - activate - activateNegativeValidTest3 <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-8e06924a-a152-4e9a-b058-f2c91c6bc5c3" class="collapse" aria-labelledby="fails-8e06924a-a152-4e9a-b058-f2c91c6bc5c3">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> Response time is less than 200ms</h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >expected 1322 to be below 200</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-4416d5a9-db4b-4376-a837-d1310288437e" aria-expanded="false" aria-controls="collapse" id="fails-4416d5a9-db4b-4376-a837-d1310288437e" class="collapsed text-white z-block">
                                    Iteration 1 - AssertionError - activate - activateNegativeValidTest4 <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-4416d5a9-db4b-4376-a837-d1310288437e" class="collapse" aria-labelledby="fails-4416d5a9-db4b-4376-a837-d1310288437e">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> Response time is less than 200ms</h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >expected 267 to be below 200</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-344ca6f1-204d-4bcf-8c78-3740ab5dbfe8" aria-expanded="false" aria-controls="collapse" id="fails-344ca6f1-204d-4bcf-8c78-3740ab5dbfe8" class="collapsed text-white z-block">
                                    Iteration 1 - AssertionError - activate - activateNegativeValidTest5 <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-344ca6f1-204d-4bcf-8c78-3740ab5dbfe8" class="collapse" aria-labelledby="fails-344ca6f1-204d-4bcf-8c78-3740ab5dbfe8">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> Response time is less than 200ms</h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >expected 268 to be below 200</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-5b1f6864-0766-421d-9cea-d62636a2e2e7" aria-expanded="false" aria-controls="collapse" id="fails-5b1f6864-0766-421d-9cea-d62636a2e2e7" class="collapsed text-white z-block">
                                    Iteration 1 - AssertionError - activate - activateNegativeValidTest6 <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-5b1f6864-0766-421d-9cea-d62636a2e2e7" class="collapse" aria-labelledby="fails-5b1f6864-0766-421d-9cea-d62636a2e2e7">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> Response time is less than 200ms</h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >expected 240 to be below 200</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-e6f9c817-df2e-44fe-8d14-c9ab9a84405e" aria-expanded="false" aria-controls="collapse" id="fails-e6f9c817-df2e-44fe-8d14-c9ab9a84405e" class="collapsed text-white z-block">
                                    Iteration 1 - Error -  -  <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-e6f9c817-df2e-44fe-8d14-c9ab9a84405e" class="collapse" aria-labelledby="fails-e6f9c817-df2e-44fe-8d14-c9ab9a84405e">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> </h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >socket hang up</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-7a843376-8322-425b-9c88-9ca38649921f" aria-expanded="false" aria-controls="collapse" id="fails-7a843376-8322-425b-9c88-9ca38649921f" class="collapsed text-white z-block">
                                    Iteration 1 - AssertionError - activate - activateNegativeInvalidTest4 <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-7a843376-8322-425b-9c88-9ca38649921f" class="collapse" aria-labelledby="fails-7a843376-8322-425b-9c88-9ca38649921f">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> expected error to be clientauth_005. got clientauth_001</h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >expected &#x27;clientauth_001&#x27; to deeply equal &#x27;clientauth_005&#x27;</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-05e6e498-eb29-439f-aa71-8acf0d4a5da8" aria-expanded="false" aria-controls="collapse" id="fails-05e6e498-eb29-439f-aa71-8acf0d4a5da8" class="collapsed text-white z-block">
                                    Iteration 1 - AssertionError - activate - activateNegativeInvalidTest4 <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-05e6e498-eb29-439f-aa71-8acf0d4a5da8" class="collapse" aria-labelledby="fails-05e6e498-eb29-439f-aa71-8acf0d4a5da8">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> expected message to be Invalid Token. got Null bearer token</h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >expected &#x27;Null bearer token&#x27; to deeply equal &#x27;Invalid Token&#x27;</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-a3c1329f-283a-455c-b81c-af47bd8bf304" aria-expanded="false" aria-controls="collapse" id="fails-a3c1329f-283a-455c-b81c-af47bd8bf304" class="collapsed text-white z-block">
                                    Iteration 1 - AssertionError - activate - activateNegativeInvalidTest5 <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-a3c1329f-283a-455c-b81c-af47bd8bf304" class="collapse" aria-labelledby="fails-a3c1329f-283a-455c-b81c-af47bd8bf304">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> expect response status to be 403,got &#x3D;&gt; 401</h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >expected 401 to deeply equal 403</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="col-sm-12 mb-3">
                    <div class="card-deck">
                        <div class="card border-danger">
                            <div class="card-header bg-danger">
                                <a data-toggle="collapse" href="#" data-target="#fails-collapse-b1e0ab50-fb24-4e1a-b917-e26a72b4aa0c" aria-expanded="false" aria-controls="collapse" id="fails-b1e0ab50-fb24-4e1a-b917-e26a72b4aa0c" class="collapsed text-white z-block">
                                    Iteration 1 - Error - activate - activateNegativeInvalidTest5 <i class="float-lg-right fa fa-chevron-down" style="padding-top:5px;"></i>
                                </a>
                            </div>
                            <div id="fails-collapse-b1e0ab50-fb24-4e1a-b917-e26a72b4aa0c" class="collapse" aria-labelledby="fails-b1e0ab50-fb24-4e1a-b917-e26a72b4aa0c">
                            <div class="card-body">
                                <h5 ><strong>Failed Test:</strong> </h5>
                            <hr>
                            <h5 class="card-title text-uppercase text-white text-center bg-danger">Assertion Error Message</h5>
                            <div>
                                <pre><code >invalid response code &#x3D;&gt; 401 expected &#x3D;&gt; 403</code></pre>
                            </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    </div>
            </div>

            <div class="tab-pane fade" id="pills-skipped" role="tabcard" aria-labelledby="pills-skipped-tab">
                <button id="topOfSkippedScreen" class="btn btn-outline-success btn-sm backToTop" onclick="topFunction()">Go To Top</button>

                <div class="alert alert-success text-uppercase text-center">
                    <br><br><h1 class="text-center">There are no skipped tests <span><i class="far fa-thumbs-up"></i></span></h1><br><br>
                </div>
            </div>
            <div class="tab-pane fade" id="pills-requests" role="tabcard" aria-labelledby="pills-requests-tab">

            <button id="topOfRequestsScreen" class="btn btn-outline-success btn-sm backToTop" onclick="topFunction()">Go To Top</button>

            <div class="btn-group float-right" role="group" aria-label="Button Group">
                <button id="showOnlyFailures" class="btn btn-outline-success btn-sm float-right" style="text-align: center; width:160px;">Show Failed Iterations</button>
                <button id="openAll" class="btn btn-outline-success btn-sm float-right" style="text-align: center; width: 140px;">Expand Folders</button>
                <button id="openAllRequests" class="btn btn-outline-success btn-sm float-right" style="text-align: center; width: 140px;">Expand Requests</button>
            </div>

    <div class="text-uppercase" id="execution-menu">
        <h5>1 Iteration available to view</h5>
        
        <nav class="table-responsive">
        <ul class="nav single-line-tabs" id="iterationList">
        </ul>
        </nav>
    </div>
    <h6 class="text-uppercase text-muted" id="iterationSelected" style="padding-top: 10px;"></h6>
	<div class="tab-content" id="execution-data">
        <div class="alert alert-dark text-uppercase text-center iteration-0">
        <a data-toggle="collapse" href="#" data-target="#folder-collapse-ed6811b5-187e-41b3-a1a9-0c0fe6fa33f7-iteration-0" aria-expanded="false" aria-controls="collapse" id="folder-ed6811b5-187e-41b3-a1a9-0c0fe6fa33f7-iteration-0" class="collapsed text-dark z-block">
        <i class="fas fa-info-circle float-left resultsInfoPass"  style="color: #c24a3f; padding-top: 4px;" style="color: #c24a3f; padding-top: 4px;" style="color: #c24a3f; padding-top: 4px;" style="color: #c24a3f; padding-top: 4px;" style="color: #c24a3f; padding-top: 4px;" style="color: #c24a3f; padding-top: 4px;" style="color: #c24a3f; padding-top: 4px;" style="color: #c24a3f; padding-top: 4px;"></i>
            ms-client / activate - 11 Requests in the folder<i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
        </a>
        </div>
        <div id="folder-collapse-ed6811b5-187e-41b3-a1a9-0c0fe6fa33f7-iteration-0" class="collapse" aria-labelledby="folder-ed6811b5-187e-41b3-a1a9-0c0fe6fa33f7">
            <div id="folder-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-danger iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9" aria-expanded="false" aria-controls="collapse" id="requests-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9" class="collapsed text-white z-block">
                    Iteration: 1 - activatePositiveTest1 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9" class="collapse" aria-labelledby="requests-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> GET</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:4001/recruiter?id&#x3D;eq.33" target="_blank">http://38.242.218.13:4001/recruiter?id&#x3D;eq.33</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 200 - OK</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 127ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 162B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-danger" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>94 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">2add6a86-f99f-4539-af36-78c74e70bc1b</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:4001</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:43:32 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Server</td>
                                                    <td class="text-wrap">postgrest/12.0.2</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Range</td>
                                                    <td class="text-wrap">0-0/*</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Location</td>
                                                    <td class="text-wrap">/recruiter?id&#x3D;eq.33</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json; charset&#x3D;utf-8</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-42b22f68-a609-4026-8626-06b06757dac1" class="prettyPrint">[{&quot;admin&quot;:false,&quot;company_id&quot;:1,&quot;id&quot;:33,&quot;email&quot;:&quot;testapi22@gmail.com&quot;,&quot;first_name&quot;:&quot;testfiAPI22&quot;,&quot;last_name&quot;:&quot;testlaAPI22&quot;,&quot;phone&quot;:&quot;1234567890&quot;,&quot;status&quot;:&quot;ACTIVE&quot;}]</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-42b22f68-a609-4026-8626-06b06757dac1">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 200,got &#x3D;&gt; 200</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Response time is less than 200ms</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center bg-danger">8</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expect content response payload check </td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected type object. got &#x3D;&gt; object</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Check required properties</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >check additional properties</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Checking schema :id</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Checking schema :firstName</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Checking schema :lastName</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Checking schema :email</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Checking schema :admin</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Checking schema :phone</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Checking schema :companyId</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Checking schema :status</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >db call non empty result </td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >db data test status</td>
                                                    <td class="text-center bg-success">8</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">120</td>
                                                    <td class="text-center">8</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row ">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failures</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                            <tr>
                                                                <td class="w-45 text-nowrap ">Response time is less than 200ms</td>
                                                                <td class="w-55"><pre><code >expected 547 to be below 200</code></pre></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
            <div id="folder-4aa01717-495e-4729-aec6-5df4614fe114" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-danger iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-4aa01717-495e-4729-aec6-5df4614fe114" aria-expanded="false" aria-controls="collapse" id="requests-4aa01717-495e-4729-aec6-5df4614fe114" class="collapsed text-white z-block">
                    Iteration: 1 - activateNegativeValidTest2 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-4aa01717-495e-4729-aec6-5df4614fe114" class="collapse" aria-labelledby="requests-4aa01717-495e-4729-aec6-5df4614fe114">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> PUT</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:8094/api/v1/clients/33/activate" target="_blank">http://38.242.218.13:8094/api/v1/clients/33/activate</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 400 - Bad Request</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 205ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 67B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-danger" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>83 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">Authorization</td>
                                                        <td class="text-wrap">Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiWDVfbm5MRWd0VVVORVltcDdFREFpN3RwYUIzdFNSUzc0RDlpM2tHWmJJIn0.eyJleHAiOjE3MTU3MDI5MTYsImlhdCI6MTcxNTcwMTQxNiwianRpIjoiNjRhOTFkNDMtODk1My00Mjk5LTg2YzMtM2E0OTVmODRiMjI1IiwiaXNzIjoiaHR0cDovLzM4LjI0Mi4yMTguMTM6ODA4MS9hdXRoL3JlYWxtcy9jbGllbnQiLCJzdWIiOiI1YWViY2RjNC05MzI1LTRmYjEtYTEzNy01MTgzNjJjYTJiNmQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjbGllbnQiLCJzZXNzaW9uX3N0YXRlIjoiODYzZDM1ZjUtYjNmMi00OGU1LWI1ZDktZmMxYjY0MDVkMTVhIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vMzguMjQyLjIxOC4xMy8qIiwiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiQ0xJRU5UIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiY2xpZW50Ijp7InJvbGVzIjpbIkNMSUVOVCJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiZGggYnIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0QGdtYWlsLmNvbSIsImdpdmVuX25hbWUiOiJkaCIsImZhbWlseV9uYW1lIjoiYnIiLCJlbWFpbCI6InRlc3RAZ21haWwuY29tIn0.X-EEjuxjuVUZ8gU2_qFTCCLlq4YxtyMg9k-HduABkuON6OpG8FSAST2ypG7s4E3gMCdJ2RjZp9q0aEeE-wDq1kzR0igL7ZcBxyOIigJlpgN_hj1o_QPzUhSc3F3tAFAEvn1JqVpKx1zpFstaPLcggs9QU64XDCI-NshK40ZePW3prOoYnzp-cVwrdavDeeTLkRtxARuZoofhCVGn2gpecf5dKIjg5YBkraGnt65tQjKW6j8PHX6lo_wv1yyoIhR0kyGO4xwMkXYk93LfhTTCps-yMKgzAsGpf8ss9QtAAwj0Tl0eWLaotrPAwR9ee64Ct1C1EPbZx7mOFF3qT3WnvA</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Type</td>
                                                        <td class="text-wrap">application/json</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">a2de57fd-8c84-4750-9eb9-a5cbbdb37ff0</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:8094</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Length</td>
                                                        <td class="text-wrap">0</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Origin</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Method</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Headers</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Content-Type-Options</td>
                                                    <td class="text-wrap">nosniff</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-XSS-Protection</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Cache-Control</td>
                                                    <td class="text-wrap">no-cache, no-store, max-age&#x3D;0, must-revalidate</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Pragma</td>
                                                    <td class="text-wrap">no-cache</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Expires</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Frame-Options</td>
                                                    <td class="text-wrap">DENY</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:43:48 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Connection</td>
                                                    <td class="text-wrap">close</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-bbdbd149-89a6-413d-ac94-896260b7fdd7" class="prettyPrint">{&quot;error&quot;:&quot;clientgeneral_002&quot;,&quot;message&quot;:&quot;user not in the same team&quot;}</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-bbdbd149-89a6-413d-ac94-896260b7fdd7">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 400,got &#x3D;&gt; 400</td>
                                                    <td class="text-center bg-success">7</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Response time is less than 200ms</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center bg-danger">7</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expect content response payload check </td>
                                                    <td class="text-center bg-success">7</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected type object. got &#x3D;&gt; object</td>
                                                    <td class="text-center bg-success">7</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected error to be clientgeneral_002. got clientgeneral_002</td>
                                                    <td class="text-center bg-success">7</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected message to be user not in the same team. got user not in the same team</td>
                                                    <td class="text-center bg-success">7</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">35</td>
                                                    <td class="text-center">7</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row ">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failures</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                            <tr>
                                                                <td class="w-45 text-nowrap ">Response time is less than 200ms</td>
                                                                <td class="w-55"><pre><code >expected 205 to be below 200</code></pre></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
            <div id="folder-cf85c226-dccb-456a-8c04-82bceb65c541" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-danger iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-cf85c226-dccb-456a-8c04-82bceb65c541" aria-expanded="false" aria-controls="collapse" id="requests-cf85c226-dccb-456a-8c04-82bceb65c541" class="collapsed text-white z-block">
                    Iteration: 1 - activateNegativeValidTest3 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-cf85c226-dccb-456a-8c04-82bceb65c541" class="collapse" aria-labelledby="requests-cf85c226-dccb-456a-8c04-82bceb65c541">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> PUT</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:8094/api/v1/clients/33/activate" target="_blank">http://38.242.218.13:8094/api/v1/clients/33/activate</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 400 - Bad Request</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 1322ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 63B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-danger" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>83 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">Authorization</td>
                                                        <td class="text-wrap">Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiWDVfbm5MRWd0VVVORVltcDdFREFpN3RwYUIzdFNSUzc0RDlpM2tHWmJJIn0.eyJleHAiOjE3MTU3MDI5MzEsImlhdCI6MTcxNTcwMTQzMSwianRpIjoiYjQwZDkzNjYtMjkxNi00YjhlLWEwYmQtMDY3ZTNkOTUzYjBmIiwiaXNzIjoiaHR0cDovLzM4LjI0Mi4yMTguMTM6ODA4MS9hdXRoL3JlYWxtcy9jbGllbnQiLCJzdWIiOiI2MWJjODlhYy0zNTlkLTQzNTUtOTNkNi05Zjg1NzU4OGE4NzciLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjbGllbnQiLCJzZXNzaW9uX3N0YXRlIjoiNjE2ZmY5MTUtODgyNC00OWQxLThjZWEtYTVlZGViMDFhZDk5IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vMzguMjQyLjIxOC4xMy8qIiwiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiQ0xJRU5UIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiY2xpZW50Ijp7InJvbGVzIjpbIkNMSUVOVCJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiZGhodXUgYnJydXUiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJkYWhtYW4uZnN0QHVocC5hYy5tYSIsImdpdmVuX25hbWUiOiJkaGh1dSIsImZhbWlseV9uYW1lIjoiYnJydXUiLCJlbWFpbCI6ImRhaG1hbi5mc3RAdWhwLmFjLm1hIn0.QOrT9kLqcNb_NoSB-ZhcgO07uB3op4e0CveEk93bnThEwbcxwMNSzGXVJRkaIPsqeH_Gb_Dd9afT1LuX2jIyCaDrh5OV_kKiQzKPs4EtX87xPT1fSaSz0jHkrvyIClGpstMoFF9Q9jncv1UczTQ4Y6CzW_-j96gX72NxKdDLxGaZ2HAb8IvarFPkPNAFLcbhy5AlqdO4lUbWkSjHn-NQYI7G80sbU5WBKont7C-cMthbqV-eI4h_4sMsSePZHc_XR1QQTfQ7EqyTaOcVqufP5U-nI7ifSl_VH5I9W_Bforp395XPyTFpM4MqawnBVeUn_l1YP0hQakRKKgITsGEeIw</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Type</td>
                                                        <td class="text-wrap">application/json</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">c3e48b62-1252-4a56-ab88-34faaa1e067f</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:8094</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Length</td>
                                                        <td class="text-wrap">0</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Origin</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Method</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Headers</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Content-Type-Options</td>
                                                    <td class="text-wrap">nosniff</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-XSS-Protection</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Cache-Control</td>
                                                    <td class="text-wrap">no-cache, no-store, max-age&#x3D;0, must-revalidate</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Pragma</td>
                                                    <td class="text-wrap">no-cache</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Expires</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Frame-Options</td>
                                                    <td class="text-wrap">DENY</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:44:04 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Connection</td>
                                                    <td class="text-wrap">close</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-de49435b-04ec-438a-a6bd-1b850ce5474d" class="prettyPrint">{&quot;error&quot;:&quot;client_general_023&quot;,&quot;message&quot;:&quot;User email not found&quot;}</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-de49435b-04ec-438a-a6bd-1b850ce5474d">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 400,got &#x3D;&gt; 400</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Response time is less than 200ms</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center bg-danger">2</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expect content response payload check </td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected type object. got &#x3D;&gt; object</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected error to be client_general_023. got client_general_023</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected message to be User email not found. got User email not found</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">10</td>
                                                    <td class="text-center">2</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row ">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failures</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                            <tr>
                                                                <td class="w-45 text-nowrap ">Response time is less than 200ms</td>
                                                                <td class="w-55"><pre><code >expected 1322 to be below 200</code></pre></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
            <div id="folder-c4c2d695-8858-4129-b3ea-3c3d209fa2da" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-danger iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-c4c2d695-8858-4129-b3ea-3c3d209fa2da" aria-expanded="false" aria-controls="collapse" id="requests-c4c2d695-8858-4129-b3ea-3c3d209fa2da" class="collapsed text-white z-block">
                    Iteration: 1 - activateNegativeValidTest4 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-c4c2d695-8858-4129-b3ea-3c3d209fa2da" class="collapse" aria-labelledby="requests-c4c2d695-8858-4129-b3ea-3c3d209fa2da">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> PUT</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:8094/api/v1/clients/44/activate" target="_blank">http://38.242.218.13:8094/api/v1/clients/44/activate</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 400 - Bad Request</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 267ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 66B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-danger" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>83 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">Authorization</td>
                                                        <td class="text-wrap">Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiWDVfbm5MRWd0VVVORVltcDdFREFpN3RwYUIzdFNSUzc0RDlpM2tHWmJJIn0.eyJleHAiOjE3MTU3MDI5NTEsImlhdCI6MTcxNTcwMTQ1MSwianRpIjoiZDEyYTYxZjEtOTVhYy00MzZkLWE3MzEtY2Y4MGYwN2UzYWQ3IiwiaXNzIjoiaHR0cDovLzM4LjI0Mi4yMTguMTM6ODA4MS9hdXRoL3JlYWxtcy9jbGllbnQiLCJzdWIiOiI2MmUxMTYyOC04MDdlLTQwZjMtYjAxNi0yNmM3ZmE5MGM4NDMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjbGllbnQiLCJzZXNzaW9uX3N0YXRlIjoiZTJjYTNjMTktNzg5My00MjliLTllZWMtYjA0MjRkNWNhMWVkIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vMzguMjQyLjIxOC4xMy8qIiwiKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnsiY2xpZW50Ijp7InJvbGVzIjpbIkNMSUVOVCJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoidGVzdGZpQVBJMjIgdGVzdGxhQVBJMjIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0YXBpMjJAZ21haWwuY29tIiwiZ2l2ZW5fbmFtZSI6InRlc3RmaUFQSTIyIiwiZmFtaWx5X25hbWUiOiJ0ZXN0bGFBUEkyMiIsImVtYWlsIjoidGVzdGFwaTIyQGdtYWlsLmNvbSJ9.HdWyhZd4lxThoUCBf3iCE1yjBDp7XmjJcAt0xyE_1VBhONjDhJdhboYVlo8jYWIe5M3YuFXUm0F9nAHxepb4PfMya5Y1TYwx8I86t-5vkE2rpiwx7ToXtp0M2z8d6KXd7oZMcUms8I24GeGLAE1342Zf4XmG_-fYEntDwP5mc3dOJZW_mpSMW9_arpae6Ot33AbIJ4JjZKF9ARmYYfVxizxOIEMPf23VW3ZxZyytbtwpUvQ8lj0tOBDQnG1E-x6AMvgbDNdPIfQGMI81wMcL16GeB8LA7JQEs5pbVzvZDFfH1B9QDIlHVn5d8pLgId-SO172qxY-EOd_NJomcVarzg</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Type</td>
                                                        <td class="text-wrap">application/json</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">7f3a9f3d-ab9d-481c-a69f-e7fc3d2597f2</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:8094</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Length</td>
                                                        <td class="text-wrap">0</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Origin</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Method</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Headers</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Content-Type-Options</td>
                                                    <td class="text-wrap">nosniff</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-XSS-Protection</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Cache-Control</td>
                                                    <td class="text-wrap">no-cache, no-store, max-age&#x3D;0, must-revalidate</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Pragma</td>
                                                    <td class="text-wrap">no-cache</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Expires</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Frame-Options</td>
                                                    <td class="text-wrap">DENY</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:44:19 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Connection</td>
                                                    <td class="text-wrap">close</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-886a52c5-0da9-4e1d-8d09-b7697caa402b" class="prettyPrint">{&quot;error&quot;:&quot;clientgeneral_003&quot;,&quot;message&quot;:&quot;The user is not an admin&quot;}</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-886a52c5-0da9-4e1d-8d09-b7697caa402b">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 400,got &#x3D;&gt; 400</td>
                                                    <td class="text-center bg-success">16</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Response time is less than 200ms</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center bg-danger">16</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expect content response payload check </td>
                                                    <td class="text-center bg-success">16</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected type object. got &#x3D;&gt; object</td>
                                                    <td class="text-center bg-success">16</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected error to be clientgeneral_003. got clientgeneral_003</td>
                                                    <td class="text-center bg-success">16</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected message to be The user is not an admin. got The user is not an admin</td>
                                                    <td class="text-center bg-success">16</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">80</td>
                                                    <td class="text-center">16</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row ">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failures</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                            <tr>
                                                                <td class="w-45 text-nowrap ">Response time is less than 200ms</td>
                                                                <td class="w-55"><pre><code >expected 267 to be below 200</code></pre></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
            <div id="folder-fa722574-d100-4c72-8d01-eaff616a616c" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-danger iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-fa722574-d100-4c72-8d01-eaff616a616c" aria-expanded="false" aria-controls="collapse" id="requests-fa722574-d100-4c72-8d01-eaff616a616c" class="collapsed text-white z-block">
                    Iteration: 1 - activateNegativeValidTest5 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-fa722574-d100-4c72-8d01-eaff616a616c" class="collapse" aria-labelledby="requests-fa722574-d100-4c72-8d01-eaff616a616c">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> PUT</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:8094/api/v1/clients/33/activate" target="_blank">http://38.242.218.13:8094/api/v1/clients/33/activate</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 400 - Bad Request</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 268ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 63B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-danger" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>83 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">Authorization</td>
                                                        <td class="text-wrap">Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiWDVfbm5MRWd0VVVORVltcDdFREFpN3RwYUIzdFNSUzc0RDlpM2tHWmJJIn0.eyJleHAiOjE3MTU3MDI5NjMsImlhdCI6MTcxNTcwMTQ2MywianRpIjoiNTU2ODFkYjYtZWRiMi00NjUzLThmMWYtYzA5NWQyOTIwNmQ5IiwiaXNzIjoiaHR0cDovLzM4LjI0Mi4yMTguMTM6ODA4MS9hdXRoL3JlYWxtcy9jbGllbnQiLCJzdWIiOiI1YWViY2RjNC05MzI1LTRmYjEtYTEzNy01MTgzNjJjYTJiNmQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjbGllbnQiLCJzZXNzaW9uX3N0YXRlIjoiYzZkNjczZjUtMmExZi00ODRkLWI4NmQtMjk0M2FiNzZkZDhhIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vMzguMjQyLjIxOC4xMy8qIiwiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiQ0xJRU5UIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiY2xpZW50Ijp7InJvbGVzIjpbIkNMSUVOVCJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiZGggYnIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0QGdtYWlsLmNvbSIsImdpdmVuX25hbWUiOiJkaCIsImZhbWlseV9uYW1lIjoiYnIiLCJlbWFpbCI6InRlc3RAZ21haWwuY29tIn0.XN2ECNbDYdJpl7uPyr6WdsK6fAnbm_6Sml87euXIFFsVBV-aDM7XPdgSBXCspv-AvTm5gXN7yBs4a4H9XPYLYRfqqrENpIS2gaSYnTsRd1iEqpf2nU52pE5ac59Bi5nuVIRoIzznBYp2Qh0OsGsdm6bitffeQ1O9nn6P3F1-XEtCUCKeGFFWSERAPF0Img7aF-gf3DG4kKoD_lZHo0P6g0JuDeMiNyJnebSVQVAxACcahADj06Stjqt_6a3J0PUGD1fehU_SkNSH0nwleQEwCN-zTV7XCZ6jnUR9YefXzDV1bzaXh5fTG7g0hdAjHCgRxIurbFYliRDEZaU2NnyHVA</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Type</td>
                                                        <td class="text-wrap">application/json</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">954f1a7f-5c09-4146-b0d3-e290ea2bda7e</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:8094</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Length</td>
                                                        <td class="text-wrap">0</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Origin</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Method</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Headers</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Content-Type-Options</td>
                                                    <td class="text-wrap">nosniff</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-XSS-Protection</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Cache-Control</td>
                                                    <td class="text-wrap">no-cache, no-store, max-age&#x3D;0, must-revalidate</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Pragma</td>
                                                    <td class="text-wrap">no-cache</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Expires</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Frame-Options</td>
                                                    <td class="text-wrap">DENY</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:44:35 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Connection</td>
                                                    <td class="text-wrap">close</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-ff804b91-fef7-4307-9479-8ba0b26267ff" class="prettyPrint">{&quot;error&quot;:&quot;clientgeneral_018&quot;,&quot;message&quot;:&quot;User Already activate&quot;}</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-ff804b91-fef7-4307-9479-8ba0b26267ff">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 400,got &#x3D;&gt; 400</td>
                                                    <td class="text-center bg-success">7</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Response time is less than 200ms</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center bg-danger">7</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expect content response payload check </td>
                                                    <td class="text-center bg-success">7</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected type object. got &#x3D;&gt; object</td>
                                                    <td class="text-center bg-success">7</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected error to be clientgeneral_018. got clientgeneral_018</td>
                                                    <td class="text-center bg-success">7</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected message to be User Already activate. got User Already activate</td>
                                                    <td class="text-center bg-success">7</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">35</td>
                                                    <td class="text-center">7</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row ">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failures</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                            <tr>
                                                                <td class="w-45 text-nowrap ">Response time is less than 200ms</td>
                                                                <td class="w-55"><pre><code >expected 268 to be below 200</code></pre></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
            <div id="folder-3024eb45-4576-4bef-a567-11f029b52678" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-danger iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-3024eb45-4576-4bef-a567-11f029b52678" aria-expanded="false" aria-controls="collapse" id="requests-3024eb45-4576-4bef-a567-11f029b52678" class="collapsed text-white z-block">
                    Iteration: 1 - activateNegativeValidTest6 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-3024eb45-4576-4bef-a567-11f029b52678" class="collapse" aria-labelledby="requests-3024eb45-4576-4bef-a567-11f029b52678">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> PUT</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:8094/api/v1/clients/99/activate" target="_blank">http://38.242.218.13:8094/api/v1/clients/99/activate</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 400 - Bad Request</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 240ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 56B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-danger" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>83 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">Authorization</td>
                                                        <td class="text-wrap">Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiWDVfbm5MRWd0VVVORVltcDdFREFpN3RwYUIzdFNSUzc0RDlpM2tHWmJJIn0.eyJleHAiOjE3MTU3MDI5NzgsImlhdCI6MTcxNTcwMTQ3OCwianRpIjoiYmNjNTUwNDgtNDY1OC00YWM0LTliZWUtNTcxNjE5OTJiMzhmIiwiaXNzIjoiaHR0cDovLzM4LjI0Mi4yMTguMTM6ODA4MS9hdXRoL3JlYWxtcy9jbGllbnQiLCJzdWIiOiI1YWViY2RjNC05MzI1LTRmYjEtYTEzNy01MTgzNjJjYTJiNmQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjbGllbnQiLCJzZXNzaW9uX3N0YXRlIjoiNzlhMGZjOGEtZmU2Zi00YWYwLWIxNmYtYWY1NTZkYTNmNDg3IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vMzguMjQyLjIxOC4xMy8qIiwiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiQ0xJRU5UIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiY2xpZW50Ijp7InJvbGVzIjpbIkNMSUVOVCJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiZGggYnIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0QGdtYWlsLmNvbSIsImdpdmVuX25hbWUiOiJkaCIsImZhbWlseV9uYW1lIjoiYnIiLCJlbWFpbCI6InRlc3RAZ21haWwuY29tIn0.En8iU3dMJ5RCGNtK5C4y0po36UZsZuYr7RPbGi5VLOlwtoYAflyhVHrLsHNLgyvQgHeWFk6r60eK_9YW_qW1Re2UcerLB0-JKdweWFexsoqWao8lYySSh0V29-5LAkEJaW5fyb_4NuRWtQwBKPRJBiYgxns1-qG6mggx2bZ-GO-jnPOILCy7A9S-Cl24YChiUwm4PjIJNZtwgxrZnM0i_3fyH9Jy-NZ_cjN7BSFwFsiiqQ_WVltry85bT2DQp2Nt7EHmiy8QQRTNrcizRwDL-3tQCfj6VA3yHvDGnO5mvSlX1vpBuOGB65jpEgG8KD-fA106L-6jPByL0Jl1ZQALvg</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Type</td>
                                                        <td class="text-wrap">application/json</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">9f8295a3-3359-4c27-a9e5-cc4d957c8ce5</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:8094</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Length</td>
                                                        <td class="text-wrap">0</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Origin</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Method</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Headers</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Content-Type-Options</td>
                                                    <td class="text-wrap">nosniff</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-XSS-Protection</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Cache-Control</td>
                                                    <td class="text-wrap">no-cache, no-store, max-age&#x3D;0, must-revalidate</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Pragma</td>
                                                    <td class="text-wrap">no-cache</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Expires</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Frame-Options</td>
                                                    <td class="text-wrap">DENY</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:44:50 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Connection</td>
                                                    <td class="text-wrap">close</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-e5b2b222-e62a-48da-8dc0-f06937899454" class="prettyPrint">{&quot;error&quot;:&quot;clientgeneral_001&quot;,&quot;message&quot;:&quot;USER not found&quot;}</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-e5b2b222-e62a-48da-8dc0-f06937899454">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 400,got &#x3D;&gt; 400</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Response time is less than 200ms</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center bg-danger">2</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expect content response payload check </td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected type object. got &#x3D;&gt; object</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected error to be clientgeneral_001. got clientgeneral_001</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected message to be USER not found. got USER not found</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">10</td>
                                                    <td class="text-center">2</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row ">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failures</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                            <tr>
                                                                <td class="w-45 text-nowrap ">Response time is less than 200ms</td>
                                                                <td class="w-55"><pre><code >expected 240 to be below 200</code></pre></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
            <div id="folder-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-success iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2" aria-expanded="false" aria-controls="collapse" id="requests-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2" class="collapsed text-white z-block">
                    Iteration: 1 - activateNegativeInvalidTest1 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2" class="collapse" aria-labelledby="requests-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> PUT</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:8094/api/v1/clients/2/activate" target="_blank">http://38.242.218.13:8094/api/v1/clients/2/activate</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 401 - Unauthorized</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 150ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 56B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-success" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>100 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">Authorization</td>
                                                        <td class="text-wrap"></td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Type</td>
                                                        <td class="text-wrap">application/json</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">0f678eeb-5fd4-4597-83ae-c978ebb73f5c</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:8094</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Length</td>
                                                        <td class="text-wrap">0</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Origin</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Method</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Headers</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Content-Type-Options</td>
                                                    <td class="text-wrap">nosniff</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-XSS-Protection</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Cache-Control</td>
                                                    <td class="text-wrap">no-cache, no-store, max-age&#x3D;0, must-revalidate</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Pragma</td>
                                                    <td class="text-wrap">no-cache</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Expires</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Frame-Options</td>
                                                    <td class="text-wrap">DENY</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json;charset&#x3D;ISO-8859-1</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:45:05 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Keep-Alive</td>
                                                    <td class="text-wrap">timeout&#x3D;60</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Connection</td>
                                                    <td class="text-wrap">keep-alive</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-24c1633e-1b78-404a-b71f-300fcfeb40e3" class="prettyPrint">{&quot;error&quot;:&quot;clientauth_001&quot;,&quot;message&quot;:&quot;Null bearer token&quot;}</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-24c1633e-1b78-404a-b71f-300fcfeb40e3">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 401,got &#x3D;&gt; 401</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Response time is less than 200ms</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expect content response payload check </td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected type object. got &#x3D;&gt; object</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected error to be clientauth_001. got clientauth_001</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected message to be Null bearer token. got Null bearer token</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">6</td>
                                                    <td class="text-center">0</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row d-none">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failure</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
            <div id="folder-bb8ab78b-7795-4f26-8b56-563e8ca9f11b" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-success iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-bb8ab78b-7795-4f26-8b56-563e8ca9f11b" aria-expanded="false" aria-controls="collapse" id="requests-bb8ab78b-7795-4f26-8b56-563e8ca9f11b" class="collapsed text-white z-block">
                    Iteration: 1 - activateNegativeInvalidTest2 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-bb8ab78b-7795-4f26-8b56-563e8ca9f11b" class="collapse" aria-labelledby="requests-bb8ab78b-7795-4f26-8b56-563e8ca9f11b">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> PUT</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:8094/api/v1/clients/2/activate" target="_blank">http://38.242.218.13:8094/api/v1/clients/2/activate</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 401 - Unauthorized</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 78ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 56B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-success" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>100 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">Authorization</td>
                                                        <td class="text-wrap">Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiWDVfbm5MRWd0VVVORVltcDdFREFpN3RwYUIzdFNSUzc0RDlpM2tHWmJJIn0.eyJleHAiOjE3MTU2MTA4OTcsImlhdCI6MTcxNTYwOTM5NywianRpIjoiNmZiMWFjMTItNjExMS00NzQ4LThhMmYtNTQ4NjUyMzRiZGNlIiwiaXNzIjoiaHR0cDovLzM4LjI0Mi4yMTguMTM6ODA4MS9hdXRoL3JlYWxtcy9jbGllbnQiLCJzdWIiOiI1YWViY2RjNC05MzI1LTRmYjEtYTEzNy01MTgzNjJjYTJiNmQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjbGllbnQiLCJzZXNzaW9uX3N0YXRlIjoiMDI3Y2NiYzMtZjc2MS00ODE0LTlhYmUtYzVkMjUwMTYxODMyIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vMzguMjQyLjIxOC4xMy8qIiwiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiQ0xJRU5UIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiY2xpZW50Ijp7InJvbGVzIjpbIkNMSUVOVCJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiZGggYnIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0QGdtYWlsLmNvbSIsImdpdmVuX25hbWUiOiJkaCIsImZhbWlseV9uYW1lIjoiYnIiLCJlbWFpbCI6InRlc3RAZ21haWwuY29tIn0.iM8bVaw5JAH9YRyvAQe1I5kXl4o5PBWp7e7qtFsrPioyztMp6IjBdIt1j544hMb5QCU7PeFyMNdrsmsISKfYc-AurpyBMmWSuE-ZVOZbt6p-FQntT7C8TIbHjaGYp4OHnKQ1kLny-BFhTHOHoadk2aqRHHs6vh3S38ki2JKcfCdIHVcy2BsmhWpMXqK1Dl_KSZ9CHc8Q0KzXzZVJo0pGRmzFbFpdl279_OVWzimbzAW8-ZfiCRPjUXO5xWKnpYkrlXZew_mkRI6ugzUA-0xD4qJyxIWCPMc7ikkCP-Seux1bbbTYah2CtE_h-6rvvQEFLb_rQO6ALRx787wGuqYcIQ</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Type</td>
                                                        <td class="text-wrap">application/json</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">682c9c23-cc72-4648-8a5a-43f1cf6f9c58</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:8094</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Length</td>
                                                        <td class="text-wrap">0</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Origin</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Method</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Headers</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Content-Type-Options</td>
                                                    <td class="text-wrap">nosniff</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-XSS-Protection</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Cache-Control</td>
                                                    <td class="text-wrap">no-cache, no-store, max-age&#x3D;0, must-revalidate</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Pragma</td>
                                                    <td class="text-wrap">no-cache</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Expires</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Frame-Options</td>
                                                    <td class="text-wrap">DENY</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json;charset&#x3D;ISO-8859-1</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:45:21 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Keep-Alive</td>
                                                    <td class="text-wrap">timeout&#x3D;60</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Connection</td>
                                                    <td class="text-wrap">keep-alive</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-15a4ce7a-ddd9-4b73-896f-8c5b69a486cd" class="prettyPrint">{&quot;error&quot;:&quot;clientauth_002&quot;,&quot;message&quot;:&quot;Token has expired&quot;}</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-15a4ce7a-ddd9-4b73-896f-8c5b69a486cd">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 401,got &#x3D;&gt; 401</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Response time is less than 200ms</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expect content response payload check </td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected type object. got &#x3D;&gt; object</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected error to be clientauth_002. got clientauth_002</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected message to be Token has expired. got Token has expired</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">6</td>
                                                    <td class="text-center">0</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row d-none">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failure</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
            <div id="folder-134999c1-4793-4d17-a019-643ffb599b8d" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-success iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-134999c1-4793-4d17-a019-643ffb599b8d" aria-expanded="false" aria-controls="collapse" id="requests-134999c1-4793-4d17-a019-643ffb599b8d" class="collapsed text-white z-block">
                    Iteration: 1 - activateNegativeInvalidTest3 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-134999c1-4793-4d17-a019-643ffb599b8d" class="collapse" aria-labelledby="requests-134999c1-4793-4d17-a019-643ffb599b8d">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> PUT</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:8094/api/v1/clients/2/activate" target="_blank">http://38.242.218.13:8094/api/v1/clients/2/activate</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 401 - Unauthorized</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 89ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 52B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-success" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>100 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">Authorization</td>
                                                        <td class="text-wrap">Bearer invalide</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Type</td>
                                                        <td class="text-wrap">application/json</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">6bc3c2a0-6548-448a-9dbf-36fb2f789aed</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:8094</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Length</td>
                                                        <td class="text-wrap">0</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Origin</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Method</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Headers</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Content-Type-Options</td>
                                                    <td class="text-wrap">nosniff</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-XSS-Protection</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Cache-Control</td>
                                                    <td class="text-wrap">no-cache, no-store, max-age&#x3D;0, must-revalidate</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Pragma</td>
                                                    <td class="text-wrap">no-cache</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Expires</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Frame-Options</td>
                                                    <td class="text-wrap">DENY</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json;charset&#x3D;ISO-8859-1</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:45:36 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Keep-Alive</td>
                                                    <td class="text-wrap">timeout&#x3D;60</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Connection</td>
                                                    <td class="text-wrap">keep-alive</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-3ec29a64-8458-47bb-9b84-e1dc81a08a5c" class="prettyPrint">{&quot;error&quot;:&quot;clientauth_005&quot;,&quot;message&quot;:&quot;Invalid Token&quot;}</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-3ec29a64-8458-47bb-9b84-e1dc81a08a5c">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 401,got &#x3D;&gt; 401</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Response time is less than 200ms</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expect content response payload check </td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected type object. got &#x3D;&gt; object</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected error to be clientauth_005. got clientauth_005</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected message to be Invalid Token. got Invalid Token</td>
                                                    <td class="text-center bg-success">1</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">6</td>
                                                    <td class="text-center">0</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row d-none">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failure</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
            <div id="folder-0573425e-a0ae-40c6-a0d6-751a01edb00e" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-danger iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-0573425e-a0ae-40c6-a0d6-751a01edb00e" aria-expanded="false" aria-controls="collapse" id="requests-0573425e-a0ae-40c6-a0d6-751a01edb00e" class="collapsed text-white z-block">
                    Iteration: 1 - activateNegativeInvalidTest4 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-0573425e-a0ae-40c6-a0d6-751a01edb00e" class="collapse" aria-labelledby="requests-0573425e-a0ae-40c6-a0d6-751a01edb00e">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> PUT</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:8094/api/v1/clients/2/activate" target="_blank">http://38.242.218.13:8094/api/v1/clients/2/activate</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 401 - Unauthorized</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 132ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 56B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-danger" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>67 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">Authorization</td>
                                                        <td class="text-wrap">Bearer </td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Type</td>
                                                        <td class="text-wrap">application/json</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">4ed94303-37d4-44a6-bba5-972ee3c68d4d</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:8094</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Length</td>
                                                        <td class="text-wrap">0</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Origin</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Method</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Headers</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Content-Type-Options</td>
                                                    <td class="text-wrap">nosniff</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-XSS-Protection</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Cache-Control</td>
                                                    <td class="text-wrap">no-cache, no-store, max-age&#x3D;0, must-revalidate</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Pragma</td>
                                                    <td class="text-wrap">no-cache</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Expires</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Frame-Options</td>
                                                    <td class="text-wrap">DENY</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json;charset&#x3D;ISO-8859-1</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:45:51 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Keep-Alive</td>
                                                    <td class="text-wrap">timeout&#x3D;60</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Connection</td>
                                                    <td class="text-wrap">keep-alive</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-3eb4842c-837e-4940-93a5-0d115baab46d" class="prettyPrint">{&quot;error&quot;:&quot;clientauth_001&quot;,&quot;message&quot;:&quot;Null bearer token&quot;}</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-3eb4842c-837e-4940-93a5-0d115baab46d">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 401,got &#x3D;&gt; 401</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >Response time is less than 200ms</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expect content response payload check </td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected type object. got &#x3D;&gt; object</td>
                                                    <td class="text-center bg-success">2</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected error to be clientauth_005. got clientauth_001</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center bg-danger">2</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                                <tr >
                                                    <td >expected message to be Invalid Token. got Null bearer token</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center bg-danger">2</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">8</td>
                                                    <td class="text-center">4</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row ">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failures</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                            <tr>
                                                                <td class="w-45 text-nowrap ">expected error to be clientauth_005. got clientauth_001</td>
                                                                <td class="w-55"><pre><code >expected &#x27;clientauth_001&#x27; to deeply equal &#x27;clientauth_005&#x27;</code></pre></td>
                                                            </tr>
                                                            <tr>
                                                                <td class="w-45 text-nowrap ">expected message to be Invalid Token. got Null bearer token</td>
                                                                <td class="w-55"><pre><code >expected &#x27;Null bearer token&#x27; to deeply equal &#x27;Invalid Token&#x27;</code></pre></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
            <div id="folder-1549dd30-dcf8-4833-b435-1e397a1d46bb" class="card-deck iteration-0">
            <div class="row iteration-0">
                <div class="col-sm-12 mb-3 iteration-0">
                <div class="card iteration-0">
                    <div class="card-header  bg-danger iteration-0">
                        <a data-toggle="collapse" href="#" data-target="#collapse-1549dd30-dcf8-4833-b435-1e397a1d46bb" aria-expanded="false" aria-controls="collapse" id="requests-1549dd30-dcf8-4833-b435-1e397a1d46bb" class="collapsed text-white z-block">
                    Iteration: 1 - activateNegativeInvalidTest5 <i class="float-lg-right fa fa-chevron-down" style="padding-top: 5px;"></i>
                </a>
                    </div>
                    <div id="collapse-1549dd30-dcf8-4833-b435-1e397a1d46bb" class="collapse" aria-labelledby="requests-1549dd30-dcf8-4833-b435-1e397a1d46bb">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Request Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request Method:</strong> <span class="badge-outline-success badge badge-success"> PUT</span><br>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Request URL:</strong> <a href="http://38.242.218.13:8094/api/v1/clients/2/activate" target="_blank">http://38.242.218.13:8094/api/v1/clients/2/activate</a><br>
                                    </div>
                                </div>
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Information</h5>
                                    <span><i class="fas fa-info-circle"></i></span><strong> Response Code:</strong> <span class="float-right badge-outline badge badge-success"> 401 - Unauthorized</span><br>
                                    <span><i class="fas fa-stopwatch"></i></span><strong> Mean time per request:</strong> <span class="float-right badge-outline badge badge-success"> 138ms</span><br>
                                    <span><i class="fas fa-database"></i></span><strong> Mean size per request:</strong> <span class="float-right badge-outline badge badge-success"> 56B</span><br>
                                    <hr>
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Test Pass Percentage</h5>
                                    <div>
                                        <div class="progress" style="height: 40px;">
                                            <div class="progress-bar  bg-danger" style="width: 100%" role="progressbar">
                                            <h5 style="padding-top:5px;"><strong>0 %</strong></h5>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 mb-3">
                                <div class="card-deck">
                                <div class="card border-info" style="width: 50rem;">
                                    <div class="card-body">
                                        <h5 class="card-title text-uppercase text-white text-center bg-info">Request Headers</h5>
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                            <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-nowrap">Authorization</td>
                                                        <td class="text-wrap">Bearer </td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Type</td>
                                                        <td class="text-wrap">application/json</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">User-Agent</td>
                                                        <td class="text-wrap">PostmanRuntime/7.37.1</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept</td>
                                                        <td class="text-wrap">*/*</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Cache-Control</td>
                                                        <td class="text-wrap">no-cache</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Postman-Token</td>
                                                        <td class="text-wrap">80fb1c00-a422-4561-ba7b-7be3197a110e</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Host</td>
                                                        <td class="text-wrap">38.242.218.13:8094</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Accept-Encoding</td>
                                                        <td class="text-wrap">gzip, deflate, br</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Connection</td>
                                                        <td class="text-wrap">keep-alive</td>
                                                    </tr>
                                                    <tr>
                                                        <td class="text-nowrap">Content-Length</td>
                                                        <td class="text-wrap">0</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Headers</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                        <thead class="thead-light text-center"><tr><th>Header Name</th><th>Header Value</th></tr></thead>
                                            <tbody>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Origin</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Method</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Vary</td>
                                                    <td class="text-wrap">Access-Control-Request-Headers</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Content-Type-Options</td>
                                                    <td class="text-wrap">nosniff</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-XSS-Protection</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Cache-Control</td>
                                                    <td class="text-wrap">no-cache, no-store, max-age&#x3D;0, must-revalidate</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Pragma</td>
                                                    <td class="text-wrap">no-cache</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Expires</td>
                                                    <td class="text-wrap">0</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">X-Frame-Options</td>
                                                    <td class="text-wrap">DENY</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Content-Type</td>
                                                    <td class="text-wrap">application/json;charset&#x3D;ISO-8859-1</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Transfer-Encoding</td>
                                                    <td class="text-wrap">chunked</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Date</td>
                                                    <td class="text-wrap">Tue, 14 May 2024 15:46:06 GMT</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Keep-Alive</td>
                                                    <td class="text-wrap">timeout&#x3D;60</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-nowrap">Connection</td>
                                                    <td class="text-wrap">keep-alive</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-sm-12 mb-3">
                            <div class="card-deck">
                            <div class="card border-info" style="width: 50rem;">
                                <div class="card-body">
                                    <h5 class="card-title text-uppercase text-white text-center bg-info">Response Body</h5>
                                        <div class="dyn-height">
                                                <pre><code id="copyText-2d8bb79d-4209-44b3-ae81-4faf00d8f54d" class="prettyPrint">{&quot;error&quot;:&quot;clientauth_001&quot;,&quot;message&quot;:&quot;Null bearer token&quot;}</code></pre>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-outline-secondary btn-sm copyButton" type="button" data-clipboard-action="copy" data-clipboard-target="#copyText-2d8bb79d-4209-44b3-ae81-4faf00d8f54d">Copy to Clipboard</button>
                                        </div>
                                </div>
                            </div>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card border-info">
                                <div class="card-body">
                                <h5 class="card-title text-uppercase text-white text-center bg-info">Test Information</h5>
                                    <div class="table-responsive text-nowrap">
                                        <table class="datatable table table-hover">
                                        <thead><tr class="text-center"><th>Name</th><th>Passed</th><th>Failed</th><th>Skipped</th></tr></thead>
                                            <tbody>
                                                <tr >
                                                    <td >expect response status to be 403,got &#x3D;&gt; 401</td>
                                                    <td class="text-center ">0</td>
                                                    <td class="text-center bg-danger">2</td>
                                                    <td class="text-center ">0</td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr class="bg-light">
                                                    <td><strong>Total</strong></td>
                                                    <td class="text-center">0</td>
                                                    <td class="text-center">2</td>
                                                    <td class="text-center">0</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="row ">
                                    <div class="col-sm-12 mb-3">
                                        <div class="card-deck">
                                        <div class="card border-danger" style="width: 50rem;">
                                            <div class="card-body">
                                                <h5 class="card-title text-uppercase text-white text-center bg-danger">Test Failures</h5>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                    <thead><tr class="text-nowrap"><th>Test Name</th><th>Assertion Error</th></tr></thead>
                                                        <tbody>
                                                            <tr>
                                                                <td class="w-45 text-nowrap ">expect response status to be 403,got &#x3D;&gt; 401</td>
                                                                <td class="w-55"><pre><code >expected 401 to deeply equal 403</code></pre></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        </div>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                </div>
            </div>
            </div>
        </div>
        </div>
    </div>
    </div>
    </div>
    </div>
    </div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.2.1/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.datatables.net/v/bs4/dt-1.10.18/datatables.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/remarkable/1.7.1/remarkable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/highlight.min.js"></script>
<script>hljs.initHighlightingOnLoad();</script>

<!-- Set slider initial position depending on the localstorage state -->

<script>
(function () {
  var sliderChecked = true;
  if (localStorage.getItem('theme') === 'theme-light') {
    setTheme('theme-light');
    sliderChecked = false;
  } else {
    setTheme('theme-dark');
    sliderChecked = true;
  }
  $(document).ready( function () {
    document.getElementById('slider').checked = sliderChecked;
  });
})();
</script>

<!-- Data Table Configuration -->

<script>
$(document).ready( function () {
    $('.datatable').DataTable({
        "retrieve": true,
        "paging": false,
        "info": false,
        "fixedColumns":   {
            "heightMatch": 'none'
        }
    });
});
</script>

<!-- Tooltip Configuration -->

<script>
$(document).ready(function() {
    $('[data-toggle="tooltip"]').tooltip({
        trigger : 'hover'
    })
})
</script>

<!-- Show/Hide The Folders -->

<script>
$('#openAll').on('click', function(e) {
let clickCount = $(this).data("clickCount") || 1
switch (clickCount){
    case 1:
            $('#folder-ed6811b5-187e-41b3-a1a9-0c0fe6fa33f7-iteration-0').removeClass('collapsed')
            $('#folder-collapse-ed6811b5-187e-41b3-a1a9-0c0fe6fa33f7-iteration-0').addClass('show')
        $('#openAll').html("Collapse Folders");
        break;
    case 2:
            $('#folder-ed6811b5-187e-41b3-a1a9-0c0fe6fa33f7-iteration-0').addClass('collapsed')
            $('#folder-collapse-ed6811b5-187e-41b3-a1a9-0c0fe6fa33f7-iteration-0').removeClass('show')
        $('#openAll').html("Expand Folders");
        break;
}
clickCount = clickCount > 1 ? 1 : ++clickCount;
$(this).data("clickCount", clickCount)
})
</script>

<!-- Show/Hide The Requests -->

<script>
$('#openAllRequests').on('click', function(e) {
let clickCount = $(this).data("clickCount") || 1
switch (clickCount){
    case 1:
            $('#requests-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').removeClass('collapsed')
            $('#collapse-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').removeClass('collapsed')
            $('#requests-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').addClass('show')
            $('#collapse-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').addClass('show')
            $('#requests-4aa01717-495e-4729-aec6-5df4614fe114').removeClass('collapsed')
            $('#collapse-4aa01717-495e-4729-aec6-5df4614fe114').removeClass('collapsed')
            $('#requests-4aa01717-495e-4729-aec6-5df4614fe114').addClass('show')
            $('#collapse-4aa01717-495e-4729-aec6-5df4614fe114').addClass('show')
            $('#requests-cf85c226-dccb-456a-8c04-82bceb65c541').removeClass('collapsed')
            $('#collapse-cf85c226-dccb-456a-8c04-82bceb65c541').removeClass('collapsed')
            $('#requests-cf85c226-dccb-456a-8c04-82bceb65c541').addClass('show')
            $('#collapse-cf85c226-dccb-456a-8c04-82bceb65c541').addClass('show')
            $('#requests-c4c2d695-8858-4129-b3ea-3c3d209fa2da').removeClass('collapsed')
            $('#collapse-c4c2d695-8858-4129-b3ea-3c3d209fa2da').removeClass('collapsed')
            $('#requests-c4c2d695-8858-4129-b3ea-3c3d209fa2da').addClass('show')
            $('#collapse-c4c2d695-8858-4129-b3ea-3c3d209fa2da').addClass('show')
            $('#requests-fa722574-d100-4c72-8d01-eaff616a616c').removeClass('collapsed')
            $('#collapse-fa722574-d100-4c72-8d01-eaff616a616c').removeClass('collapsed')
            $('#requests-fa722574-d100-4c72-8d01-eaff616a616c').addClass('show')
            $('#collapse-fa722574-d100-4c72-8d01-eaff616a616c').addClass('show')
            $('#requests-3024eb45-4576-4bef-a567-11f029b52678').removeClass('collapsed')
            $('#collapse-3024eb45-4576-4bef-a567-11f029b52678').removeClass('collapsed')
            $('#requests-3024eb45-4576-4bef-a567-11f029b52678').addClass('show')
            $('#collapse-3024eb45-4576-4bef-a567-11f029b52678').addClass('show')
            $('#requests-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').removeClass('collapsed')
            $('#collapse-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').removeClass('collapsed')
            $('#requests-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').addClass('show')
            $('#collapse-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').addClass('show')
            $('#requests-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').removeClass('collapsed')
            $('#collapse-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').removeClass('collapsed')
            $('#requests-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').addClass('show')
            $('#collapse-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').addClass('show')
            $('#requests-134999c1-4793-4d17-a019-643ffb599b8d').removeClass('collapsed')
            $('#collapse-134999c1-4793-4d17-a019-643ffb599b8d').removeClass('collapsed')
            $('#requests-134999c1-4793-4d17-a019-643ffb599b8d').addClass('show')
            $('#collapse-134999c1-4793-4d17-a019-643ffb599b8d').addClass('show')
            $('#requests-0573425e-a0ae-40c6-a0d6-751a01edb00e').removeClass('collapsed')
            $('#collapse-0573425e-a0ae-40c6-a0d6-751a01edb00e').removeClass('collapsed')
            $('#requests-0573425e-a0ae-40c6-a0d6-751a01edb00e').addClass('show')
            $('#collapse-0573425e-a0ae-40c6-a0d6-751a01edb00e').addClass('show')
            $('#requests-1549dd30-dcf8-4833-b435-1e397a1d46bb').removeClass('collapsed')
            $('#collapse-1549dd30-dcf8-4833-b435-1e397a1d46bb').removeClass('collapsed')
            $('#requests-1549dd30-dcf8-4833-b435-1e397a1d46bb').addClass('show')
            $('#collapse-1549dd30-dcf8-4833-b435-1e397a1d46bb').addClass('show')
        $('#openAllRequests').html("Collapse Requests");
        break;
    case 2:
            $('#requests-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').addClass('collapsed')
            $('#collapse-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').addClass('collapsed')
            $('#requests-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').removeClass('show')
            $('#collapse-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').removeClass('show')
            $('#requests-4aa01717-495e-4729-aec6-5df4614fe114').addClass('collapsed')
            $('#collapse-4aa01717-495e-4729-aec6-5df4614fe114').addClass('collapsed')
            $('#requests-4aa01717-495e-4729-aec6-5df4614fe114').removeClass('show')
            $('#collapse-4aa01717-495e-4729-aec6-5df4614fe114').removeClass('show')
            $('#requests-cf85c226-dccb-456a-8c04-82bceb65c541').addClass('collapsed')
            $('#collapse-cf85c226-dccb-456a-8c04-82bceb65c541').addClass('collapsed')
            $('#requests-cf85c226-dccb-456a-8c04-82bceb65c541').removeClass('show')
            $('#collapse-cf85c226-dccb-456a-8c04-82bceb65c541').removeClass('show')
            $('#requests-c4c2d695-8858-4129-b3ea-3c3d209fa2da').addClass('collapsed')
            $('#collapse-c4c2d695-8858-4129-b3ea-3c3d209fa2da').addClass('collapsed')
            $('#requests-c4c2d695-8858-4129-b3ea-3c3d209fa2da').removeClass('show')
            $('#collapse-c4c2d695-8858-4129-b3ea-3c3d209fa2da').removeClass('show')
            $('#requests-fa722574-d100-4c72-8d01-eaff616a616c').addClass('collapsed')
            $('#collapse-fa722574-d100-4c72-8d01-eaff616a616c').addClass('collapsed')
            $('#requests-fa722574-d100-4c72-8d01-eaff616a616c').removeClass('show')
            $('#collapse-fa722574-d100-4c72-8d01-eaff616a616c').removeClass('show')
            $('#requests-3024eb45-4576-4bef-a567-11f029b52678').addClass('collapsed')
            $('#collapse-3024eb45-4576-4bef-a567-11f029b52678').addClass('collapsed')
            $('#requests-3024eb45-4576-4bef-a567-11f029b52678').removeClass('show')
            $('#collapse-3024eb45-4576-4bef-a567-11f029b52678').removeClass('show')
            $('#requests-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').addClass('collapsed')
            $('#collapse-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').addClass('collapsed')
            $('#requests-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').removeClass('show')
            $('#collapse-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').removeClass('show')
            $('#requests-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').addClass('collapsed')
            $('#collapse-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').addClass('collapsed')
            $('#requests-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').removeClass('show')
            $('#collapse-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').removeClass('show')
            $('#requests-134999c1-4793-4d17-a019-643ffb599b8d').addClass('collapsed')
            $('#collapse-134999c1-4793-4d17-a019-643ffb599b8d').addClass('collapsed')
            $('#requests-134999c1-4793-4d17-a019-643ffb599b8d').removeClass('show')
            $('#collapse-134999c1-4793-4d17-a019-643ffb599b8d').removeClass('show')
            $('#requests-0573425e-a0ae-40c6-a0d6-751a01edb00e').addClass('collapsed')
            $('#collapse-0573425e-a0ae-40c6-a0d6-751a01edb00e').addClass('collapsed')
            $('#requests-0573425e-a0ae-40c6-a0d6-751a01edb00e').removeClass('show')
            $('#collapse-0573425e-a0ae-40c6-a0d6-751a01edb00e').removeClass('show')
            $('#requests-1549dd30-dcf8-4833-b435-1e397a1d46bb').addClass('collapsed')
            $('#collapse-1549dd30-dcf8-4833-b435-1e397a1d46bb').addClass('collapsed')
            $('#requests-1549dd30-dcf8-4833-b435-1e397a1d46bb').removeClass('show')
            $('#collapse-1549dd30-dcf8-4833-b435-1e397a1d46bb').removeClass('show')
        $('#openAllRequests').html("Expand Requests");
        break;
}
clickCount = clickCount > 1 ? 1 : ++clickCount;
$(this).data("clickCount", clickCount)
})
</script>

<!-- Show/Hide The Skipped Tests -->

<script>
$('#openAllSkipped').on('click', function(e) {
let clickCount = $(this).data("clickCount") || 1
switch (clickCount){
    case 1:
            $('#skipped-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').removeClass('collapsed')
            $('#skipped-collapse-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').removeClass('collapsed')
            $('#skipped-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').addClass('show')
            $('#skipped-collapse-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').addClass('show')
            $('#skipped-4aa01717-495e-4729-aec6-5df4614fe114').removeClass('collapsed')
            $('#skipped-collapse-4aa01717-495e-4729-aec6-5df4614fe114').removeClass('collapsed')
            $('#skipped-4aa01717-495e-4729-aec6-5df4614fe114').addClass('show')
            $('#skipped-collapse-4aa01717-495e-4729-aec6-5df4614fe114').addClass('show')
            $('#skipped-cf85c226-dccb-456a-8c04-82bceb65c541').removeClass('collapsed')
            $('#skipped-collapse-cf85c226-dccb-456a-8c04-82bceb65c541').removeClass('collapsed')
            $('#skipped-cf85c226-dccb-456a-8c04-82bceb65c541').addClass('show')
            $('#skipped-collapse-cf85c226-dccb-456a-8c04-82bceb65c541').addClass('show')
            $('#skipped-c4c2d695-8858-4129-b3ea-3c3d209fa2da').removeClass('collapsed')
            $('#skipped-collapse-c4c2d695-8858-4129-b3ea-3c3d209fa2da').removeClass('collapsed')
            $('#skipped-c4c2d695-8858-4129-b3ea-3c3d209fa2da').addClass('show')
            $('#skipped-collapse-c4c2d695-8858-4129-b3ea-3c3d209fa2da').addClass('show')
            $('#skipped-fa722574-d100-4c72-8d01-eaff616a616c').removeClass('collapsed')
            $('#skipped-collapse-fa722574-d100-4c72-8d01-eaff616a616c').removeClass('collapsed')
            $('#skipped-fa722574-d100-4c72-8d01-eaff616a616c').addClass('show')
            $('#skipped-collapse-fa722574-d100-4c72-8d01-eaff616a616c').addClass('show')
            $('#skipped-3024eb45-4576-4bef-a567-11f029b52678').removeClass('collapsed')
            $('#skipped-collapse-3024eb45-4576-4bef-a567-11f029b52678').removeClass('collapsed')
            $('#skipped-3024eb45-4576-4bef-a567-11f029b52678').addClass('show')
            $('#skipped-collapse-3024eb45-4576-4bef-a567-11f029b52678').addClass('show')
            $('#skipped-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').removeClass('collapsed')
            $('#skipped-collapse-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').removeClass('collapsed')
            $('#skipped-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').addClass('show')
            $('#skipped-collapse-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').addClass('show')
            $('#skipped-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').removeClass('collapsed')
            $('#skipped-collapse-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').removeClass('collapsed')
            $('#skipped-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').addClass('show')
            $('#skipped-collapse-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').addClass('show')
            $('#skipped-134999c1-4793-4d17-a019-643ffb599b8d').removeClass('collapsed')
            $('#skipped-collapse-134999c1-4793-4d17-a019-643ffb599b8d').removeClass('collapsed')
            $('#skipped-134999c1-4793-4d17-a019-643ffb599b8d').addClass('show')
            $('#skipped-collapse-134999c1-4793-4d17-a019-643ffb599b8d').addClass('show')
            $('#skipped-0573425e-a0ae-40c6-a0d6-751a01edb00e').removeClass('collapsed')
            $('#skipped-collapse-0573425e-a0ae-40c6-a0d6-751a01edb00e').removeClass('collapsed')
            $('#skipped-0573425e-a0ae-40c6-a0d6-751a01edb00e').addClass('show')
            $('#skipped-collapse-0573425e-a0ae-40c6-a0d6-751a01edb00e').addClass('show')
            $('#skipped-1549dd30-dcf8-4833-b435-1e397a1d46bb').removeClass('collapsed')
            $('#skipped-collapse-1549dd30-dcf8-4833-b435-1e397a1d46bb').removeClass('collapsed')
            $('#skipped-1549dd30-dcf8-4833-b435-1e397a1d46bb').addClass('show')
            $('#skipped-collapse-1549dd30-dcf8-4833-b435-1e397a1d46bb').addClass('show')
        $('#openAllSkipped').html("Collapse All Skipped Tests");
        break;
    case 2:
            $('#skipped-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').addClass('collapsed')
            $('#skipped-collapse-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').addClass('collapsed')
            $('#skipped-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').removeClass('show')
            $('#skipped-collapse-88a96caf-5a59-4c2a-bbbf-1b72aa8da0b9').removeClass('show')
            $('#skipped-4aa01717-495e-4729-aec6-5df4614fe114').addClass('collapsed')
            $('#skipped-collapse-4aa01717-495e-4729-aec6-5df4614fe114').addClass('collapsed')
            $('#skipped-4aa01717-495e-4729-aec6-5df4614fe114').removeClass('show')
            $('#skipped-collapse-4aa01717-495e-4729-aec6-5df4614fe114').removeClass('show')
            $('#skipped-cf85c226-dccb-456a-8c04-82bceb65c541').addClass('collapsed')
            $('#skipped-collapse-cf85c226-dccb-456a-8c04-82bceb65c541').addClass('collapsed')
            $('#skipped-cf85c226-dccb-456a-8c04-82bceb65c541').removeClass('show')
            $('#skipped-collapse-cf85c226-dccb-456a-8c04-82bceb65c541').removeClass('show')
            $('#skipped-c4c2d695-8858-4129-b3ea-3c3d209fa2da').addClass('collapsed')
            $('#skipped-collapse-c4c2d695-8858-4129-b3ea-3c3d209fa2da').addClass('collapsed')
            $('#skipped-c4c2d695-8858-4129-b3ea-3c3d209fa2da').removeClass('show')
            $('#skipped-collapse-c4c2d695-8858-4129-b3ea-3c3d209fa2da').removeClass('show')
            $('#skipped-fa722574-d100-4c72-8d01-eaff616a616c').addClass('collapsed')
            $('#skipped-collapse-fa722574-d100-4c72-8d01-eaff616a616c').addClass('collapsed')
            $('#skipped-fa722574-d100-4c72-8d01-eaff616a616c').removeClass('show')
            $('#skipped-collapse-fa722574-d100-4c72-8d01-eaff616a616c').removeClass('show')
            $('#skipped-3024eb45-4576-4bef-a567-11f029b52678').addClass('collapsed')
            $('#skipped-collapse-3024eb45-4576-4bef-a567-11f029b52678').addClass('collapsed')
            $('#skipped-3024eb45-4576-4bef-a567-11f029b52678').removeClass('show')
            $('#skipped-collapse-3024eb45-4576-4bef-a567-11f029b52678').removeClass('show')
            $('#skipped-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').addClass('collapsed')
            $('#skipped-collapse-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').addClass('collapsed')
            $('#skipped-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').removeClass('show')
            $('#skipped-collapse-5a28b84d-cc6d-4a5a-89cd-2499ce663ab2').removeClass('show')
            $('#skipped-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').addClass('collapsed')
            $('#skipped-collapse-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').addClass('collapsed')
            $('#skipped-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').removeClass('show')
            $('#skipped-collapse-bb8ab78b-7795-4f26-8b56-563e8ca9f11b').removeClass('show')
            $('#skipped-134999c1-4793-4d17-a019-643ffb599b8d').addClass('collapsed')
            $('#skipped-collapse-134999c1-4793-4d17-a019-643ffb599b8d').addClass('collapsed')
            $('#skipped-134999c1-4793-4d17-a019-643ffb599b8d').removeClass('show')
            $('#skipped-collapse-134999c1-4793-4d17-a019-643ffb599b8d').removeClass('show')
            $('#skipped-0573425e-a0ae-40c6-a0d6-751a01edb00e').addClass('collapsed')
            $('#skipped-collapse-0573425e-a0ae-40c6-a0d6-751a01edb00e').addClass('collapsed')
            $('#skipped-0573425e-a0ae-40c6-a0d6-751a01edb00e').removeClass('show')
            $('#skipped-collapse-0573425e-a0ae-40c6-a0d6-751a01edb00e').removeClass('show')
            $('#skipped-1549dd30-dcf8-4833-b435-1e397a1d46bb').addClass('collapsed')
            $('#skipped-collapse-1549dd30-dcf8-4833-b435-1e397a1d46bb').addClass('collapsed')
            $('#skipped-1549dd30-dcf8-4833-b435-1e397a1d46bb').removeClass('show')
            $('#skipped-collapse-1549dd30-dcf8-4833-b435-1e397a1d46bb').removeClass('show')
        $('#openAllSkipped').html("Expand All Skipped Tests");
        break;
}
clickCount = clickCount > 1 ? 1 : ++clickCount;
$(this).data("clickCount", clickCount)
})
</script>

<!-- Show/Hide The Failures -->

<script>
$('#openAllFailed').on('click', function(e) {
let clickCount = $(this).data("clickCount") || 1
let failedItemContent
let failedItemHeading
switch (clickCount){
    case 1:
            failedItemHeading = $('#fails-f4bb7b9e-2752-4dd4-b94c-2cbdf096bcc6');
            failedItemContent = $("#fails-collapse-f4bb7b9e-2752-4dd4-b94c-2cbdf096bcc6");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
            failedItemHeading = $('#fails-66202744-248e-4486-8377-1a574da0e9bd');
            failedItemContent = $("#fails-collapse-66202744-248e-4486-8377-1a574da0e9bd");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
            failedItemHeading = $('#fails-8e06924a-a152-4e9a-b058-f2c91c6bc5c3');
            failedItemContent = $("#fails-collapse-8e06924a-a152-4e9a-b058-f2c91c6bc5c3");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
            failedItemHeading = $('#fails-4416d5a9-db4b-4376-a837-d1310288437e');
            failedItemContent = $("#fails-collapse-4416d5a9-db4b-4376-a837-d1310288437e");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
            failedItemHeading = $('#fails-344ca6f1-204d-4bcf-8c78-3740ab5dbfe8');
            failedItemContent = $("#fails-collapse-344ca6f1-204d-4bcf-8c78-3740ab5dbfe8");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
            failedItemHeading = $('#fails-5b1f6864-0766-421d-9cea-d62636a2e2e7');
            failedItemContent = $("#fails-collapse-5b1f6864-0766-421d-9cea-d62636a2e2e7");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
            failedItemHeading = $('#fails-e6f9c817-df2e-44fe-8d14-c9ab9a84405e');
            failedItemContent = $("#fails-collapse-e6f9c817-df2e-44fe-8d14-c9ab9a84405e");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
            failedItemHeading = $('#fails-7a843376-8322-425b-9c88-9ca38649921f');
            failedItemContent = $("#fails-collapse-7a843376-8322-425b-9c88-9ca38649921f");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
            failedItemHeading = $('#fails-05e6e498-eb29-439f-aa71-8acf0d4a5da8');
            failedItemContent = $("#fails-collapse-05e6e498-eb29-439f-aa71-8acf0d4a5da8");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
            failedItemHeading = $('#fails-a3c1329f-283a-455c-b81c-af47bd8bf304');
            failedItemContent = $("#fails-collapse-a3c1329f-283a-455c-b81c-af47bd8bf304");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
            failedItemHeading = $('#fails-b1e0ab50-fb24-4e1a-b917-e26a72b4aa0c');
            failedItemContent = $("#fails-collapse-b1e0ab50-fb24-4e1a-b917-e26a72b4aa0c");
            failedItemHeading.removeClass('collapsed')
            failedItemContent.removeClass('collapsed')
            failedItemHeading.addClass('show')
            failedItemContent.addClass('show')
        $('#openAllFailed').html("Collapse All Failed Tests");
        break;
    case 2:
            failedItemHeading = $('#fails-f4bb7b9e-2752-4dd4-b94c-2cbdf096bcc6');
            failedItemContent = $("#fails-collapse-f4bb7b9e-2752-4dd4-b94c-2cbdf096bcc6");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
            failedItemHeading = $('#fails-66202744-248e-4486-8377-1a574da0e9bd');
            failedItemContent = $("#fails-collapse-66202744-248e-4486-8377-1a574da0e9bd");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
            failedItemHeading = $('#fails-8e06924a-a152-4e9a-b058-f2c91c6bc5c3');
            failedItemContent = $("#fails-collapse-8e06924a-a152-4e9a-b058-f2c91c6bc5c3");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
            failedItemHeading = $('#fails-4416d5a9-db4b-4376-a837-d1310288437e');
            failedItemContent = $("#fails-collapse-4416d5a9-db4b-4376-a837-d1310288437e");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
            failedItemHeading = $('#fails-344ca6f1-204d-4bcf-8c78-3740ab5dbfe8');
            failedItemContent = $("#fails-collapse-344ca6f1-204d-4bcf-8c78-3740ab5dbfe8");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
            failedItemHeading = $('#fails-5b1f6864-0766-421d-9cea-d62636a2e2e7');
            failedItemContent = $("#fails-collapse-5b1f6864-0766-421d-9cea-d62636a2e2e7");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
            failedItemHeading = $('#fails-e6f9c817-df2e-44fe-8d14-c9ab9a84405e');
            failedItemContent = $("#fails-collapse-e6f9c817-df2e-44fe-8d14-c9ab9a84405e");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
            failedItemHeading = $('#fails-7a843376-8322-425b-9c88-9ca38649921f');
            failedItemContent = $("#fails-collapse-7a843376-8322-425b-9c88-9ca38649921f");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
            failedItemHeading = $('#fails-05e6e498-eb29-439f-aa71-8acf0d4a5da8');
            failedItemContent = $("#fails-collapse-05e6e498-eb29-439f-aa71-8acf0d4a5da8");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
            failedItemHeading = $('#fails-a3c1329f-283a-455c-b81c-af47bd8bf304');
            failedItemContent = $("#fails-collapse-a3c1329f-283a-455c-b81c-af47bd8bf304");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
            failedItemHeading = $('#fails-b1e0ab50-fb24-4e1a-b917-e26a72b4aa0c');
            failedItemContent = $("#fails-collapse-b1e0ab50-fb24-4e1a-b917-e26a72b4aa0c");
            failedItemHeading.removeClass('show')
            failedItemContent.removeClass('show')
            failedItemHeading.addClass('collapsed')
            failedItemContent.addClass('collapsed')
        $('#openAllFailed').html("Expand All Failed Tests");
        break;
}
clickCount = clickCount > 1 ? 1 : ++clickCount;
$(this).data("clickCount", clickCount)
})
</script>

<!-- Pretty Print the Response Body-->

<script>
function isJSON(data)
{
    var ret = true;
    try {
            JSON.parse(data);
    }catch(e) {
            ret = false;
    }
    return ret;
}

function isXML(data)
{
    return (data.length > 0 && data[0] === '<');
}

// see https://gist.github.com/sente/1083506/d2834134cd070dbcc08bf42ee27dabb746a1c54d#gistcomment-2254622
function formatXML(data) {
    const PADDING = ' '.repeat(2); // set desired indent size here
    const reg = /(>)(<)(\/*)/g;
    let pad = 0;
    xml = data.replace(reg, '$1\r\n$2$3');

    return xml.split('\r\n').map((node, index) => {
        let indent = 0;
        if (node.match(/.+<\/\w[^>]*>$/)) {
            indent = 0;
        } else if (node.match(/^<\/\w/) && pad > 0) {
            pad -= 1;
        } else if (node.match(/^<\w[^>]*[^\/]>.*$/)) {
            indent = 1;
        } else {
            indent = 0;
        }

        pad += indent;
        return PADDING.repeat(pad - indent) + node;
    }).join('\r\n');
}

$(".prettyPrint").each(function () {
        var data = $(this).text();
        // Verify whether data is JSON
        if(isJSON(data))
        {
                obj = JSON.parse(data);
                data = JSON.stringify(obj, null, 2);
        }
        else if(isXML(data)) {
            data = formatXML(data);
        }
        $(this).text(data);
});
</script>


<!-- Copy Response Body To Clipboard -->

<script>
    var clipboard = new ClipboardJS('.copyButton');

    clipboard.on('success', function(e) {
        e.clearSelection();
        $(".copyButton").addClass("bg-success text-white")
        e.trigger.textContent = '✔ Copied!';
        window.setTimeout(function() {
            $(".copyButton").removeClass("bg-success text-white")
            e.trigger.textContent = 'Copy to Clipboard';
        }, 2000);
    });
    clipboard.on('error', function(e) {
        e.clearSelection();
        $(".copyButton").addClass("bg-danger text-white")
        e.trigger.textContent = '✗ Not Copied';
        window.setTimeout(function() {
            $(".copyButton").removeClass("bg-danger text-white")
            e.trigger.textContent = 'Copy to Clipboard';
        }, 2000);
    });

</script>

<!-- Render the Description Markdown and link in the test failures -->

<script>
    const remarkable = new Remarkable();

    const descriptions = document.querySelectorAll(".renderMarkdown");
    descriptions.forEach(description => {
        description.innerHTML = renderHtmlFromMarkdown(description.textContent);
    });
    function renderHtmlFromMarkdown(markdown) {
        return remarkable.render(trim(markdown));
    }
    function trim(string) {
        return string ? string.replace(/^ +| +$/gm, "") : string;
    }
</script>

<!-- Show/Hide The Toggles When Scrolling The Page -->

<script>
window.onscroll = function() {scrollFunction()};

function scrollFunction() {
  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
    document.getElementById("topOfRequestsScreen").style.display = "block";
    document.getElementById("topOfFailuresScreen").style.display = "block";
    document.getElementById("topOfSkippedScreen").style.display = "block";
    document.getElementById("openAll").style.display = "none";
    document.getElementById("openAllRequests").style.display = "none";


    document.getElementById("showOnlyFailures").style.display = "none";
    document.getElementById("openAllFailed").style.display = "none";
  } else {
    document.getElementById("topOfRequestsScreen").style.display = "none";
    document.getElementById("topOfFailuresScreen").style.display = "none";
    document.getElementById("topOfSkippedScreen").style.display = "none";
    document.getElementById("openAll").style.display = "block";
    document.getElementById("openAllRequests").style.display = "block";

    document.getElementById("showOnlyFailures").style.display = "block";
    document.getElementById("openAllFailed").style.display = "block";
  }
}

function topFunction() {
  document.body.scrollTop = 0;
  document.documentElement.scrollTop = 0;
}
</script>

<!-- Creates The Iteration Tabs -->

<script type="text/javascript">
    "use strict";

window.onload = function () {

  // set display for all blocks of response
  var allItems = document.querySelectorAll('[class*=iteration-]');
  allItems.forEach(function(elem){
    elem.style.display = 'block';
  });

   
  let totalIterations = 1;
   

  let menu = document.querySelector('#execution-menu .nav');

  for(var i = 0; i < totalIterations; i++)
  {
    let li = document.createElement('li');
    li.appendChild(document.createTextNode((i + 1)));
    li.setAttribute('id', 'iteration-' + i);
    li.classList.add("custom-tab");
    li.classList.add("itPassed");

    li.addEventListener('click', function() {
      //set display to none for all except row
      let allItems = document.querySelectorAll('[class*=iteration-]:not(.row)');
      allItems.forEach(function(elem) {
        elem.style.display = 'none';
      })

      let allMenus = document.querySelectorAll('[id*=iteration-]');
      allMenus.forEach(function(elem){
        elem.style.borderBottom = 'none';
      })

      this.style.borderBottom = 'solid 3px #032a33';

      let items = document.querySelectorAll("." + this.id + ':not(.row)');
      items.forEach(function(elem) {
        elem.style.display = elem.style.display == 'block' ? 'none' : 'block';
      })
    });
    menu.appendChild(li);
  }

  //shows first tab data
  document.getElementById('iteration-0').click();
  document.getElementById('iterationSelected').innerHTML = `Iteration ${document.getElementById('iteration-0').innerHTML} selected`

    $("#iteration-0").removeClass('itPassed').addClass('itFailed')
    $("#iteration-0").removeClass('itPassed').addClass('itFailed')
    $("#iteration-0").removeClass('itPassed').addClass('itFailed')
    $("#iteration-0").removeClass('itPassed').addClass('itFailed')
    $("#iteration-0").removeClass('itPassed').addClass('itFailed')
    $("#iteration-0").removeClass('itPassed').addClass('itFailed')
    $("#iteration-0").removeClass('itPassed').addClass('itFailed')
    $("#iteration-0").removeClass('itPassed').addClass('itFailed')
}
</script>

<!-- Create the Selected Iteration Label -->

<script>
$(document).ready(function(){
    $(function() {
        $("#iterationList li").click(function() {
            document.getElementById('iterationSelected').innerHTML = "Iteration " + this.innerHTML + " selected"
        });
    });
});
</script>

<!-- Filter Action for the Iterations -->

<script>
$("#filterInput").on("input paste", function() {
    var value = $(this).val();
    $("#iterationList li").filter(function() {
	    $("#showOnlyFailures").data("clickCount") ? $("#showOnlyFailures").click():null;
        $(this).toggle($(this).text().indexOf(value) > -1)
    });
});
</script>

<!-- Showing the Failed Interations -->

<script>
$('#showOnlyFailures').on('click', function(e) {
    let clickCount = $(this).data("clickCount") || 1
	$("#filterInput").val()!="" && clickCount==1 ? $("#filterInput").val('').trigger('input'): null;
    let selectedIteration = $('#iterationList li').filter(function () {
        return $(this).css('border-bottom').indexOf("solid") > -1 && $(this).hasClass('itFailed');
    });
    selectedIteration.length || clickCount > 1 ? null : $("#iterationList li.itFailed")[0].click()
    $("#iterationList li.itPassed").toggle()
    $("div.bg-success [id*=requests]").parents('[class^="row iteration-"]').toggle();
    clickCount = clickCount > 1 ? 1 : ++clickCount;
    clickCount > 1 ? $("#showOnlyFailures").html("Show All Iterations") : $("#showOnlyFailures").html("Show Failed Iterations");
    $(this).data("clickCount", clickCount)
})
</script>
</body>
</html>
